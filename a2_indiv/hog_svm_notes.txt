###################################################################
[TEST 1]

DIR = 'Individual_Component'
SEED = 42
NO_PERSON = 0
IS_PERSON = 1

CELL_PIXELSHAPE = (4,4)
NORIENTATIONS = 12
CELLS_PER_BLOCK = (1,1)

x_train, y_train = load_images(True,True, 3000,3000)

0.100s runtime: Individual_Component\train\train_positive_A\00000000\item_00000000.pnm
HOG descriptor size: (3840,)

## TRAINING
[Loading Images]:
5.501s runtime: Individual_Component\train\train_positive_A\00000000
5.979s runtime: Individual_Component\train\train_positive_A\00000001
5.081s runtime: Individual_Component\train\train_positive_A\00000002
5.042s runtime: Individual_Component\train\train_negative_A\00000000
4.950s runtime: Individual_Component\train\train_negative_A\00000001
5.387s runtime: Individual_Component\train\train_negative_A\00000002
Reformatting data...
Reshuffling data...
0.068s runtime: shuffling

[Training SVM model]:
273.344s runtime: training


x_test, y_test = load_images(False,True)

## TESTING
[Loading Images]:
4.934s runtime: Individual_Component\test\test_positive\00000000
5.498s runtime: Individual_Component\test\test_positive\00000001
5.360s runtime: Individual_Component\test\test_positive\00000002
2.453s runtime: Individual_Component\test\test_positive\00000003
4.887s runtime: Individual_Component\test\test_negative\00000000
5.406s runtime: Individual_Component\test\test_negative\00000001
5.876s runtime: Individual_Component\test\test_negative\00000002
5.444s runtime: Individual_Component\test\test_negative\00000003
5.382s runtime: Individual_Component\test\test_negative\00000004
5.417s runtime: Individual_Component\test\test_negative\00000005
Reformatting data...
Reshuffling data...
0.117s runtime: shuffling

[Test set evaluation]
  * 154.064s prediction time
  * AUC (weighted): 0.995
  * Accuracy: 0.969
  * Recall (weighted): 0.969
  * Confusion Matrix:
[[5744  256]
 [  40 3417]]


## EVALUATING ON THE SAME TRAINING DATA
[Evaluating classifier with test data]:
  * 94.340s prediction time
  * AUC (weighted): 0.996
  * Accuracy: 0.978
  * Recall (weighted): 0.978
  * Confusion Matrix:
[[2893  107]
 [  25 2975]]

svm_model_4-4_12_1-1.pickle: 56,378 KB

 Comments:
  * Modify code such that we can see what the false positives and false negatives are (DONE)
  * Training and prediction time are really high; see if this can be reduced
  * Considering that the head is really small, wouldn't cell size (4,4) be the best we can already do? 

  * Class imbalance problem
  * Over-fitting
  * Is there a way to plot the actual class distribution? (Can't understand it atm)

[!REPORT]
The whole point of this assignment is experimentation. Therefore:
    2. Experiment for different cell sizes + orientations (TABULATE RESULTS)
    2.5. Experiment with different total training images
    3. Experiment for different algorithms
    1. AUC suggests this is a good result. Double-check with theory this is not overfitted, etc.
    0. Read the relevant paper - see what statistical measures are useful.
    0.5. Log loss? Edge image?

Answer
    0. Miss rate, false positives
    0.5. 
    1. Supposedly perfect in its original paper on the weak dataset?
    2. We need to validate that fine orientation coding (up to 9 bins) is essential, whereas spatial binning can be more coarse. Also have to do a
    cell size vs block size plot. (Then just match results to the paper.)
    * R-HOG vs C-HOG
    * Square blocks vs rectangular/cross ones.
    * With/without validation
    * Types of block-normalization schemes
    * Size of border on all sides (16px)
    * (Seems to be all empirical; no good reasoning provided)
    * (What parameters does scikitlearn actually allow us to test?)
    2.5/3. (Do last; etc.)

    * Class imbalance:
       - There are 2x many NEG than there are POS in the test data
       - Basically, keep your class distribution sizes balanced
       - (I think all we can do is address how we used the dataset to avoid this issue. We could also test for it if required though)

    * Overfitting: 
       - If we reduce #features up until its too simple, then we get less variance in predictions, more bias towards wrong outcomes
       - If our model does much better on the training set than on the test set, then weâ€™re likely overfitting. (But we don't have that case)
       - Ensure your data is clean and relevant
       - A system that has been overly trained on a model dataset (or trained on too small of a dataset) will suffer from overfitting

    * (Could try a different dataset (testing) to see if it's overfitted)

CELL_PIXEL_LIST = [4, 6, 7, 8, 9, 10, 12, 14, 16]
ORIENTATION_LIST = [6, 8, 9, 10, 12, 16, 32]
BLOCK_SIZE_LIST = [2, 3, 4, 5, 6]
BLOCK_NORM_LIST = ['L1', 'L1-sqrt', 'L2', 'L2-Hys']

hog(img, orientations=NORIENTATIONS, 
    pixels_per_cell=CELL_PIXELSHAPE, cells_per_block=CELLS_PER_BLOCK, 
    block_norm=BLOCK_NORM, visualize=visualize, transform_sqrt=True,
    multichannel=True)

https://scikit-learn.org/stable/modules/svm.html - tips on practical use
https://towardsdatascience.com/train-validation-and-test-sets-72cb40cba9e7 - validation

https://elitedatascience.com/overfitting-in-machine-learning
https://stats.stackexchange.com/questions/266174/techniques-to-detect-overfitting - regularisation to restrict complexity
https://www.quora.com/How-do-people-in-computer-vision-deal-with-the-overfitting

http://www.chioka.in/class-imbalance-problem/ - class imbalance
https://machinelearningmastery.com/what-is-imbalanced-classification/

AIM: investigate HOG+SVM for the NICTA training set; effect of changes some of the parameters on the result.

Better to automate 2 and 2.5 if possible...

###################################################################
[TEST 2]

CELL_PIXELSHAPE = (8,8)
NORIENTATIONS = 12
CELLS_PER_BLOCK = (1,1)

HOG descriptor size: (960,)

[Loading Images]:
8.642s runtime: Individual_Component\train\train_positive_A\00000000
8.521s runtime: Individual_Component\train\train_positive_A\00000001
7.700s runtime: Individual_Component\train\train_positive_A\00000002
7.860s runtime: Individual_Component\train\train_negative_A\00000000
7.868s runtime: Individual_Component\train\train_negative_A\00000001
8.141s runtime: Individual_Component\train\train_negative_A\00000002
Reformatting data...
Reshuffling data...
0.025s runtime: shuffling

117.138s runtime: training
Images loaded: 6000

[Evaluating classifier with data]:
  * 31.144s prediction time
  * AUC (weighted): 0.995
  * Accuracy: 0.966
  * Recall (weighted): 0.966
  * Confusion Matrix:
[[5733  267]
 [  51 3406]]

 svm_model_8-8_12_1-1.pickle: 11,627 KB